# Run VPR for the 'and' design
#--write_rr_graph example_rr_graph.xml
vpr ${VPR_ARCH_FILE} ${VPR_TESTBENCH_BLIF} --clock_modeling route --read_rr_graph ${ARCH_DESIGNS}/rr_graph.xml --write_rr_graph rr_graph.xml --route_chan_width 2

# Read OpenFPGA architecture definition
read_openfpga_arch -f ${OPENFPGA_ARCH_FILE}

# Read OpenFPGA simulation settings
read_openfpga_simulation_setting -f ${OPENFPGA_SIM_SETTING_FILE}

# Write the openfpga archeticture
write_openfpga_arch -f openfpga_arch.xml

# Annotate the OpenFPGA architecture to VPR data base
# to debug use --verbose options
# --sort_gsb_chan_node_in_edges
link_openfpga_arch --activity_file ${ACTIVITY_FILE} --verbose --3d_sb

# Write the GSB files
#write_gsb_to_xml -f gsb.xml

# Check and correct any naming conflicts in the BLIF netlist
check_netlist_naming_conflict --fix --report ./netlist_renaming.xml

# Build the module graph
#  - Enabled compression on routing architecture modules
#  - Enable pin duplication on grid modules
build_fabric #--compress_routing #--verbose

# Write the fabric hierarchy of module graph to a file
# This is used by hierarchical PnR flows
write_fabric_hierarchy --file ./fabric_hierarchy.txt

# Write the fabric I/O attributes to a file
# This is used by pin constraint files
write_fabric_io_info --file ./fabric_io_location.xml --verbose

# Write the Verilog netlist for FPGA fabric
#  - Enable the use of explicit port mapping in Verilog netlist
#  --print_user_defined_template
write_fabric_verilog --file ${OPENFPGA_VERILOG_OUTPUT_DIR}/SRC --explicit_port_mapping --include_timing --verbose

# Write the SDC files for PnR backend
#  - Turn on every options here
write_pnr_sdc --file ./SDC

# Write SDC to disable timing for configure ports
write_sdc_disable_timing_configure_ports --file ./SDC/disable_configure_ports.sdc

# Finish and exit OpenFPGA
exit

# Note :
# To run verification at the end of the flow maintain source in ./SRC directory
